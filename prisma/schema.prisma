generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TipoUsuario {
  aluno
  professor
  administrador
}

model Usuario {
  id            Int       @id @default(autoincrement())
  email         String    @unique
  nome          String
  sobrenome     String
  senha         String
  tipo          TipoUsuario
  foto_perfil   String?
  data_criacao  DateTime  @default(now())
  ultimo_acesso DateTime?
  ativo         Boolean   @default(true)

  // Relações
  eventos_criados      Evento[]     @relation("criador")
  inscricoes           Inscricao[]
  comentarios          Comentario[]
  feedbacks_dados      Feedback[]   @relation("professor")
  feedbacks_recebidos  Feedback[]   @relation("aluno")
  destaques_recebidos  Destaque[]   @relation("aluno_destaque")
  destaques_dados      Destaque[]   @relation("professor_que_destacou")

  @@map("usuarios")
}

model Evento {
  id                Int       @id @default(autoincrement())
  titulo            String
  descricao         String?
  data_inicio       DateTime
  data_fim          DateTime
  local             String?
  criado_por        Int
  data_criacao      DateTime  @default(now())
  data_atualizacao  DateTime  @default(now())

  // Relações
  criador           Usuario   @relation("criador", fields: [criado_por], references: [id])
  imagens           ImagemEvento[]
  inscricoes        Inscricao[]
  comentarios       Comentario[]
  feedbacks         Feedback[]
  destaques         Destaque[]

  @@map("eventos")
}

model ImagemEvento {
  id          Int     @id @default(autoincrement())
  evento_id   Int
  url         String
  descricao   String?
  ordem       Int     @default(0)

  // Relações
  evento      Evento  @relation(fields: [evento_id], references: [id], onDelete: Cascade)

  @@map("imagens_evento")
}

model Inscricao {
  id              Int       @id @default(autoincrement())
  usuario_id      Int
  evento_id       Int
  data_inscricao  DateTime  @default(now())
  status          String    @default("confirmado")

  // Relações
  usuario         Usuario   @relation(fields: [usuario_id], references: [id], onDelete: Cascade)
  evento          Evento    @relation(fields: [evento_id], references: [id], onDelete: Cascade)

  @@unique([usuario_id, evento_id])
  @@map("inscricoes")
}

model Comentario {
  id              Int       @id @default(autoincrement())
  usuario_id      Int
  evento_id       Int
  texto           String
  data_criacao    DateTime  @default(now())
  data_atualizacao DateTime?

  // Relações
  usuario         Usuario   @relation(fields: [usuario_id], references: [id], onDelete: Cascade)
  evento          Evento    @relation(fields: [evento_id], references: [id], onDelete: Cascade)

  @@map("comentarios")
}

model Feedback {
  id              Int       @id @default(autoincrement())
  professor_id    Int
  aluno_id        Int
  evento_id       Int
  texto           String
  pontuacao       Int
  data_criacao    DateTime  @default(now())

  // Relações
  professor       Usuario   @relation("professor", fields: [professor_id], references: [id], onDelete: Cascade)
  aluno           Usuario   @relation("aluno", fields: [aluno_id], references: [id], onDelete: Cascade)
  evento          Evento    @relation(fields: [evento_id], references: [id], onDelete: Cascade)

  @@unique([professor_id, aluno_id, evento_id])
  @@map("feedbacks")
}

model Destaque {
  id              Int       @id @default(autoincrement())
  aluno_id        Int
  evento_id       Int
  motivo          String?
  criado_por      Int
  data_criacao    DateTime  @default(now())

  // Relações
  aluno           Usuario   @relation("aluno_destaque", fields: [aluno_id], references: [id], onDelete: Cascade)
  evento          Evento    @relation(fields: [evento_id], references: [id], onDelete: Cascade)
  professor       Usuario   @relation("professor_que_destacou", fields: [criado_por], references: [id])

  @@unique([aluno_id, evento_id])
  @@map("destaques")
}